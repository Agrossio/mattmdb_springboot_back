SERVICE:

@Override
    public void removeFromFavorites(int userId, Media favorite) {

        Optional<User> oFoundUser = this.userRepository.findById(userId);
        Optional<Media> oFoundMedia = this.mediaRepository.findById(favorite.getMediaId());

        if (oFoundUser.isPresent() && oFoundMedia.isPresent()) {
            boolean contienePelicula = oFoundUser.get().getFavorites().contains(oFoundMedia.get());
            if (contienePelicula) {
                User user = oFoundUser.get();
                user.getFavorites().remove(oFoundMedia.get());
                userRepository.save(user);
            }
        }

        /*

        User updatedUser;

        if (oFoundUser.isEmpty()) {
            throw new HttpClientErrorException(HttpStatus.NOT_FOUND, String.format("User ID %s not found.", userId));
        }

        User foundUser = oFoundUser.get();

        // TODO validate token previous to this:

        List<Media> favoritesList = foundUser.getFavorites();

        // Check if this media is already a favorite of the user:
        boolean isFavorite = favoritesList.contains(favorite);


        // remove favorite from the User instance
        favoritesList.remove(favorite);

        foundUser.setFavorites(favoritesList);


        // update user in DB:
        updatedUser = userRepository.save(foundUser);

        return updatedUser;
        */
    }


CONTROLLER:

 /*****************************************************
     * DELETE FAVORITE  /api/v2/users/favorites/:userId  *
     *****************************************************/


    @PostMapping("/remove-favorites/{userId}")
    @ApiOperation(value = "Remove from favorites", hidden = true)
    // if path params name equals the argument name we don't need to use name inside @PathVariable
    public ResponseEntity removeFavorite(@PathVariable(name = "userId") Integer userId, @RequestBody Media favoriteFromRequest) {

        Message body;

        try {
            this.userService.removeFromFavorites(userId, favoriteFromRequest);

            // Get rid of fan info:
            //UserDTO updatedUserDTO = this.userMapper.entityToDto(updatedUser);

            // TODO: change media id with media title
            body = new Message("Remove Favorite", String.format("Media %s removed from your favorites", favoriteFromRequest.getMediaId()), 200, true, favoriteFromRequest);

            return ResponseEntity.ok(body);

        } catch (HttpClientErrorException ex) {

            // log error:
            log.error(ex.getMessage());
            body = new Message("Add Favorite", ex.getMessage(), ex.getStatusCode().value(), false);

            return ResponseEntity.status(ex.getStatusCode()).body(body);
        }

    }

    